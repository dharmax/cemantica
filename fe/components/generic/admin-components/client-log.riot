<client-log>

    <div class="control">
        <div class="user-filter">
            <h3>User filter</h3>
            <div if="{state.showUser}">
                {state.showUser.email}
                <i class="material-icons" onclick="{resetUserFilter}">cancel</i>
            </div>
            <zippy title="Select user" ref="{userZippy}">
                <item-selector callback="{setUserFilter}" loader="{userLoader}" label="select user"
                               projection="{['name','email']}"></item-selector>
            </zippy>
        </div>
        <div class="query">
            <h3>Mongo filter</h3>
            <input type="text" onchange="{queryChanged}" placeholder="search criteria">
        </div>

        <div class="range">
            <div class="pretty p-switch p-fill">
                <input type="checkbox" onchange="{toggle('start')}" value="{state.withStart}">
                <div class="state"><label>From</label></div>
            </div>
            <time-picker onchange="{changeRange('start')}" enableTime={true} disabled="{!state.withstart}"
                         api="{startApi}"></time-picker>
            <div class="pretty p-switch p-fill">
                <input type="checkbox" onchange="{toggle('end')}" value="{state.withend">
                <div class="state"><label>To</label></div>
            </div>
            <time-picker onchange="{changeRange('end')}" enableTime={true} disabled="{!state.withend}"
                         api="{endApi}"></time-picker>
        </div>

    </div>

    <div class="entities">

        <div class="entry" each="{e in entries}">
            <span class="time">{e.time}</span>
            <span class="title">{e.title}</span>
            <span class="user">{e.email}</span>
            <div class="sub-entries">
                <div each="{se in e.subEntries}">
                    {e.toString()}
                </div>
            </div>
        </div>


    </div>
    <script>

        import {post} from "../../../lib/api-helper";
        import TimePicker from '../time-picker.riot'
        import Zippy from '../zippy.riot'
        import ItemSelector from '../item-selector.riot'
        import {Alert} from "../../../services/alert-service";

        let query = {}
        export default {

            components: {
                TimePicker,
                Zippy,
                ItemSelector
            },
            startApi: {},
            endApi: {},
            userZippy: {},
            onMounted() {
                this.update({
                    entries: []
                })
                this.loadClientLog()
            },
            async loadClientLog() {
                if (!query.from)
                    delete query.from
                const result = await post(`admin/client-log/query`, {
                    reportRangeEnd: query.to,
                    reportRangeStart: query.from,

                })
                const entries = processLog(result)
                this.update({
                    entries
                })
            },
            queryChanged(e) {
                try {
                    const queryText = e && e.target.value;
                    const freeQuery = JSON.parse(queryText)
                    Object.assign(query.query, {query: freeQuery})

                } catch (e) {
                    Alert(e)
                }
                this.loadClientLog()
            },
            setUserFilter(user) {
                if (!query.query)
                    query.query = {}
                query.query.userId = user.email
                this.userZippy.api.close()
                this.update({showUser: user})
                this.loadClientLog()

            },
            resetUserFilter() {
                query.query && delete query.query.userId
                this.userZippy.api.close()
                this.update({showUser: undefined})
                this.loadClientLog()
            },

            userLoader(filter) {
                if (!filter)
                    return []
                return post('users/search', {string: filter, projection: ['name', 'email', 'id']})
            },
            toggle(which, e) {
                const self = this
                return e => {
                    const api = self[which + 'Api'].api;
                    this.update({['with' + which]: e.target.checked})
                    if (!e.target.checked) {
                        api.clear()
                        delete query[which == 'start' ? 'from' : 'to']
                    }
                    this.loadClientLog()
                }
            },
            changeRange(which, time) {
                return time => {
                    const t = time && time.length && new Date(time)
                    if (t)
                        query[which == 'start' ? 'from' : 'to'] = t
                    this.loadClientLog()
                }
            },
        }

        function processLog(logEntries) {

            const result = []
            let currentGroup
            logEntries.forEach(e => {
                if (!currentGroup && !e.title)
                    return
                if (e.title) {
                    currentGroup = {title: e.title, time: e.time, email: e.email, userId: e.userId, subEntries: []}
                    result.push(currentGroup)
                } else {
                    currentGroup.subEntries.push(e)
                }
            })
            return result
        }
    </script>

</client-log>