<whisperation>
    <div onclick="{openWhisperation}" class="{role}">
        <template if="{props.data}">
            <div class="featuringType" if="{props.role === 'highlight'}">
                {getFeatureTitle()} whisperation
            </div>
            <span if="{props.role !== 'highlight'}"> </span>
            <ol>
                <li each="{i in props.data.items}">
                    {i}
                </li>
            </ol>
            <div class="adult" if="{props.data && props.data.adultOnly }">adult</div>
            <control if="{usable()}">
                <a href="#new-piece/{props.data.id}">Use</a>
            </control>
            <div class="info" if="{props.role =='reminder'}">
            </div>
            <div class="info" if="{props.role =='list'}">
                <template if="{props.data.lastUsed}">last featured: {relativeTime(props.data.lastUsed)}</template>
            </div>
        </template>
        <template if="{!props.data}">
            Whisperation is gone...
        </template>
    </div>
    <script>

        import {FeaturingRole} from "../../../lib/common-specific-types";
        import {relativeTime} from "short-relative-time";

        /**
         * props:
         * data - the whisperation data
         * role - reminder, list, preview, highlight
         */
        export default {
            onMounted() {
                const r = Math.random() * 8 - 4
                this.root.style.transform = `rotate(${r}deg)`
            },
            relativeTime: s => relativeTime(new Date(s)),
            getFeatureTitle() {
                return FeaturingRole[this.props.data.featuringAs]
            },
            openWhisperation() {
                location.hash = `whisperation/${this.props.data.id}`
            },
            usable() {
                const role = this.props.role;
                return role !== 'reminder'
                    && role !== 'preview'
            }

        }
    </script>

</whisperation>