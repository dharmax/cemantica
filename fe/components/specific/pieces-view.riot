<pieces-view>
    <h1>Pieces</h1>

    <details>
        <summary>
            view setting ({viewSettingAsString()})
        </summary>
        <form class="view-mode" onclick="{changeListMode}">
            <div class="filter">
                <input type="radio" name="filter" id="all" value="all" checked><label for="all">All writers</label>
                <input disabled="{!isLoggedIn()}" type="radio" name="filter" id="subscriptions"
                       value="subscriptions"><label for="subscriptions">My subscriptions</label>
            </div>
            <template if="{forAll()}">
                <div class="order">
                    <input type="radio" name="order" id="newest" value="newest" checked><label for="newest">Newest
                    first</label>
                    <input type="radio" name="order" id="oldest" value="oldest"><label for="oldest"> Oldest
                    first</label>
                    <input type="radio" name="order" id="highest" value="highestRating"><label for="highest">Highest
                    rating</label>
                    <input type="radio" name="order" id="most" value="mostViewed"><label for="most">Most viewed</label>
                    <input type="radio" name="order" id="least" value="leastViewed"><label for="least">Least
                    viewed</label>
                    <input type="radio" name="order" id="trend" value="trending"><label for="trend">Trending</label>
                </div>
                <div class="period">
                    <input type="radio" name="period" id="alltimes" value="allTimes" checked><label for="alltimes">All
                    times</label>
                    <input type="radio" name="period" id="month" value="pastMonth"><label for="month">Past
                    month</label>
                    <input type="radio" name="period" id="year" value="pastYear"><label for="year">Past year</label>
                </div>
            </template>
        </form>

    </details>
    <section class="pieces-wall">
        <template if="{state.pieces}" each="{piece in state.pieces}">
            <wall-piece data="{piece}"/>
        </template>
    </section>
    <pager provider="{loadPieces}" api="{pagerApi}"/>
    <script>

        import Pager from '../generic/pager.riot'
        import WallPiece from './wall-piece.riot'
        import {pieceStore} from '../../viewmodel/piece-store'
        import {userStore} from "../../viewmodel/user-store";
        import {isLoggedIn} from "../../services/session-manager";
        import Zippy from '../generic/zippy.riot'

        const listMode = {
            filter: 'all',
            order: 'newest',
            period: 'allTimes'
        }
        export default {

            components: {
                WallPiece,
                Pager,
                Zippy
            },
            pagerApi: {},
            isLoggedIn,
            async onMounted() {
                this.update({
                    viewConfig: await userStore.getViewConfig()
                })
                this.pagerApi.pager.gotoStart()
            },
            forAll() {
                return listMode.filter === 'all'
            },
            async loadPieces(from, count) {
                const sort = {
                    newest: 'originalPublishDate:-1',
                    oldest: 'originalPublishDate:1',
                    highestRating: 'averageScore:-1,originalPublishDate:-1',
                    mostViewed: 'viewsCount:-1,averageScore:-1',
                    leastViewed: 'viewsCount:1,averageScore:-1',
                    trending: 'lastViewed:-1'
                }[listMode.order]
                const readConf = {
                    from, count, sort, queryName: 'recent', queryParams: {
                        since: {
                            allTimes: 0,
                            pastYear: Date.now() - 1000 * 60 * 60 * 24 * 365,
                            pastMonth: Date.now() - 1000 * 60 * 60 * 24 * 30
                        }[listMode.period] || 0
                    }
                }
                const result = await pieceStore.load(readConf,
                    listMode.filter === 'all' ? 'general' : 'subscriptions')
                this.update({
                    pieces: result.items
                })
                return result
            },
            viewSettingAsString() {
                return `${listMode.filter}, ${listMode.order}, ${listMode.period}`
            },
            async changeListMode(e) {
                const form = this.$('.view-mode')

                for (let key of Object.keys(listMode)) {
                    listMode[key] = form[key] && form[key].value
                }
                this.pagerApi.pager.gotoStart()
            }
        }


    </script>


</pieces-view>