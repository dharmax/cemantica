<piece-page>
    <template if="{state.piece}">
        <section class="piece-page">
            <section class="meta-section">
                <div class="info-section">
                    <meta property="og:type" content="article"/>
                    <meta property="url" content="{`${baseUrl}/#piece/${state.piece.id}`}"/>
                    <meta property="article:author" content="{`${baseUrl}/#writer/${state.piece.writer.id}`}"/>
                    <meta property="og:title" content="{state.piece.title}"/>
                    <meta property="og:description" content="{state.piece.type} {state.piece.sampleText}"/>
                    <whisperation data="{state.piece.whisperation}"></whisperation>
                    <div if="{state.piece.adultOnly}" class="adult">Warning: suitable for adults only!</div>
                    <div class="times">
                        Created: {toDate(state.piece._created)} <br/>
                        Last updated: {toDate(state.piece.edited)}
                    </div>
                    <div class="views">{state.piece.views} views</div>
                    <button class="flag" onclick="{flag}">
                        <div class="tooltip">Flag as inappropriate</div>
                        Flag
                    </button>
                    <div class="flags" if="{state.piece.flags}">
                        <br>
                        Flagged {state.piece.flags} times
                    </div>

                    <rating-widget entity="{state.piece}" userId="{state.userId}" ownerId="{state.piece.writer.id}"
                                   onchange="{generateReloadPiece()}"/>
                </div>
                <div class="control" if="{mayEdit()}">
                    <select class="status" onchange="{changeStatus}" value="{state.piece.status}">
                        <option value="draft">Draft</option>
                        <option value="published">Public</option>
                        <option value="limited">Limited</option>
                        <option value="private">Private</option>
                        <option value="hidden">Hidden</option>
                    </select>
                    <a href="#edit-piece/{state.piece.id}">Edit</a>
                    <a onclick="{eraseRequest}">Delete</a>
                    <button onclick="{markAdult}">
                        <div class="tooltip">
                            Limit viewing to adults only (toggle)
                        </div>
                        Adults
                    </button>
                </div>
            </section>
            <br>

            <article>
                <div class="title">{state.piece.title}</div>
                <div class="type">A {state.piece.type}</div>
                <div class="writer">by <a href="#writer/{state.piece.writer.id}">{state.piece.writer.name}</a></div>
                <div class="text">
                    <raw html="{convert(state.piece.text)}"></raw>
                </div>
            </article>
            <div class="erase-request" if="{state.eraseRequested}">
                <div class="modal-overlay"></div>
                <div class="lightbox">
                    <div class="content">
                        <div class="title">
                            Delete piece
                        </div>
                        <div class="body">
                            Are you sure you wish to delete "{state.piece.title}"? <br>
                            Bare in mind you can hide it instead....
                        </div>
                        <div class="control">
                            <button onclick="{erasePiece}">Delete</button>
                            <button onclick="{justHide}">Hide</button>
                            <button onclick="{cancelErase}">Cancel</button>
                        </div>
                    </div>
                </div>

            </div>
            <section class="discussion">
                <new-post root={state.piece.id} role="comment"/>
                <discussion root="{state.piece.id}" config="{discussionConfig}"/>
            </section>
        </section>
    </template>
    <script>

        import {pieceStore} from '../../viewmodel/piece-store'
        import Whisperation from "./whisperation.riot"
        import {stateManager} from "../../lib/state-manager";
        import Raw from '../generic/raw.riot'
        import RatingWidget from '../generic/rating-widget.riot'
        import {Alert} from "../../services/alert-service";
        import {getSession} from "../../services/session-manager";
        import {createDateFunction, throttle} from "../../lib/utils";
        import {baseUrl} from "../../lib/api-helper";
        import Discussion from '../generic/discussion.riot'
        import NewPost from '../generic/new-post.riot'

        // noinspection JSUnusedGlobalSymbols
        export default {
            components: {
                Whisperation,
                Raw,
                RatingWidget,
                Discussion,
                NewPost
            },
            discussionConfig: {
                maxDepth: 8
            },
            baseUrl,
            async onMounted() {
                const pieceId = stateManager.context
                const piece = await pieceStore.getEntity(pieceId)
                const session = await new Promise(res => setTimeout(res(getSession()), 10))
                this.update({
                    piece,
                    userId: session && session.userId
                })
                this.$$('.title,.text').forEach(n => {
                    n.style.direction = piece.language === 'he' ? 'rtl' : 'ltr'
                })
            },
            toDate: createDateFunction({
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            }),
            generateReloadPiece() {
                return throttle(
                    async () => {
                        const pieceId = this.state.piece.id
                        this.update({
                            piece: await pieceStore.getEntity(pieceId)
                        })
                    }, 1500, this)
            },
            convert(text) {
                return text.replace(/\r?\n/g, '<br />');
            },
            async changeStatus(e) {
                const newStatus = e.target.value
                await pieceStore.changeStatus(this.state.piece.id, newStatus)
                this.state.piece.status = newStatus
                Alert('Piece visibility changed successfully', 'info')
            },
            mayEdit() {
                const piece = this.state.piece;
                return piece && piece.mayEdit
            },
            eraseRequest() {
                this.update({eraseRequested: true})
            },
            async erasePiece() {
                await pieceStore.remove(this.state.piece.id)
                history.back()
            },
            async justHide() {
                await pieceStore.changeStatus(this.state.piece.id, 'hidden')
                this.state.piece.status = 'hidden'
                this.update({eraseRequested: false})
                Alert('Visibility of piece changed to Hidden.')

            },
            cancelErase() {
                this.update({eraseRequested: false})
            },
            async markAdult() {
                const pieceId = this.state.piece.id
                await pieceStore.update(pieceId, {adultOnly: !this.state.piece.adultOnly})
                const piece = await pieceStore.getEntity(pieceId)

                this.update({piece})
            },
            async flag() {
                await pieceStore.flag(this.state.piece.id)
                const pieceId = this.state.piece.id
                const piece = await pieceStore.getEntity(pieceId)
                this.update({piece})

            }


        }
    </script>

</piece-page>