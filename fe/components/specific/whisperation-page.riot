<whisperation-page>

    <div class="whisperation">
        <whisperation if="{state.whisperation}" data="{state.whisperation}"/>
        <div class="info-section" if="{state.whisperation}">
            contributed by <a href="#writer/{state.whisperation.writer.id}">{state.whisperation.writer.name}</a>
            <br>
            <div class="times">
                Created: {state.whisperation._created} <br/>
            </div>
            <div class="flags" if="{state.whisperation.flags}">
                <br>
                Flagged {state.whisperation.flags} times
            </div>
            <div class="control">
                <button onclick="{flag}" title="Flag as inappropriate">Flag</button>
                <button if="{state.whisperation.mayEdit}" onclick="{deleteWhisperation}">Delete</button>
                <button if="{state.whisperation.mayEdit}" onclick="{markAdult}">Limit to adults</button>
            </div>
        </div>
    </div>
    <section class="pieces" if="{state.pieces}">
        <h1 if="{state.pieces.length}">These pieces were inspired by that whisperation:</h1>
        <template if="{!state.pieces.length}">
            <h1 style="margin-top: 20%;">This whisperation is yet to whispire...</h1>
            <h1>(or maybe it DID inspire creations which are not visible to you)</h1>
        </template>
        <div>
            <wall-piece each="{piece in state.pieces}" data="{piece}"/>
        </div>
    </section>

    <script>


        import {pieceStore} from "../../viewmodel/piece-store";
        import {stateManager} from "../../lib/state-manager";
        import {whisperationStore} from "../../viewmodel/whisperations-store";
        import Whisperation from "./whisperation.riot"
        import WallPiece from "./wall-piece.riot"
        import {Alert} from "../../services/alert-service";

        export default {
            components: {
                Whisperation,
                WallPiece
            },
            async onMounted() {

                const whisperation = await whisperationStore.getEntity(stateManager.context)
                whisperation._created = new Date(whisperation._created).toLocaleDateString('en', {
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric'
                })

                this.update({
                    pieces: await pieceStore.getByWhisperation(stateManager.context),
                    whisperation
                })
            },
            async deleteWhisperation() {
                await whisperationStore.remove(this.state.whisperation.id)
                Alert('Whisperation deleted', 'info')
            },
            async markAdult() {
                await whisperationStore.update(this.state.whisperation.id, {adultOnly: !this.state.whisperation.adultOnly})
                const whisperation = await whisperationStore.getEntity(stateManager.context)

                this.update({whisperation})
            },
            async flag() {
                await whisperationStore.flag(this.state.whisperation.id)
            }

        }
    </script>

</whisperation-page>